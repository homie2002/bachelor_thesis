import os
import time
import hashlib
import shutil
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
import matplotlib.pyplot as plt
import csv
from datetime import datetime

GB = 1024 * 1024 * 1024

class SSDTesterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("SSD Endurance Tester")

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∞
        self.total_written_gb = 0
        self.cycles = []
        self.speeds = []
        self.cycle_times = []
        self.total_time = 0  # –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.log_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "ssd_test_log.txt")
        self.csv_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "ssd_test_report.csv")
        self.start_time = None  # –î–ª—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã

        tk.Label(root, text="–ü—É—Ç—å –∫ SSD-–ø–∞–ø–∫–µ:").grid(row=0, column=0, sticky='w')
        self.path_entry = tk.Entry(root, width=50)
        self.path_entry.grid(row=0, column=1)
        tk.Button(root, text="–û–±–∑–æ—Ä...", command=self.browse_folder).grid(row=0, column=2)

        self.use_all_space = tk.BooleanVar()
        self.use_all_space.set(True)
        tk.Checkbutton(root, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä—ë–º", variable=self.use_all_space, command=self.toggle_entry).grid(row=1, column=0, columnspan=2, sticky='w')

        tk.Label(root, text="–ò–ª–∏ —É–∫–∞–∑–∞—Ç—å –æ–±—ä—ë–º (–ì–ë):").grid(row=2, column=0, sticky='w')
        self.size_entry = tk.Entry(root, width=10)
        self.size_entry.grid(row=2, column=1, sticky='w')
        self.size_entry.insert(0, "10")

        tk.Label(root, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:").grid(row=3, column=0, sticky='w')
        self.cycles_entry = tk.Entry(root, width=10)
        self.cycles_entry.grid(row=3, column=1, sticky='w')
        self.cycles_entry.insert(0, "1")

        self.start_button = tk.Button(root, text="‚ñ∂ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", command=self.start_test)
        self.start_button.grid(row=4, column=0, pady=10)

        self.stop_button = tk.Button(root, text="‚ñ† –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_test, state=tk.DISABLED)
        self.stop_button.grid(row=4, column=1, pady=10)

        self.log_text = tk.Text(root, height=20, width=80)
        self.log_text.grid(row=5, column=0, columnspan=3)

        self.stop_flag = False
        self.cycle = 0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞
        self.create_logfile()

    def toggle_entry(self):
        self.size_entry.config(state='disabled' if self.use_all_space.get() else 'normal')

    def browse_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.path_entry.delete(0, tk.END)
            self.path_entry.insert(0, folder)

    def start_test(self):
        self.stop_flag = False
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.start_time = time.time()  # –ù–∞—á–∞–ª–æ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        threading.Thread(target=self.run_test).start()

    def stop_test(self):
        self.stop_flag = True
        self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.")

    def run_test(self):
        path = self.path_entry.get()
        if not os.path.exists(path):
            self.log("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        try:
            if self.use_all_space.get():
                total, used, free = shutil.disk_usage(path)
                size_to_write_gb = (free - 2 * GB) // GB
            else:
                size_to_write_gb = int(self.size_entry.get())

            if size_to_write_gb <= 0:
                self.log("‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return

            num_cycles = int(self.cycles_entry.get())
            if num_cycles <= 0:
                self.log("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {e}")
            return

        test_dir = os.path.join(path, "ssd_test_temp")
        os.makedirs(test_dir, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ CSV-–æ—Ç—á—ë—Ç–∞
        self.init_csv_report()

        try:
            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤
            for cycle in range(1, num_cycles + 1):
                if self.stop_flag:
                    break

                self.cycle = cycle
                self.log(f"\nüîÅ –¶–∏–∫–ª {self.cycle} ‚Äî –ó–∞–ø–∏—Å—å {size_to_write_gb} –ì–ë")
                cycle_time = self.test_cycle(test_dir, size_to_write_gb)

                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
                self.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞...")
                for filename in os.listdir(test_dir):
                    file_path = os.path.join(test_dir, filename)
                    if os.path.isfile(file_path):
                        os.remove(file_path)

                self.cycle_times.append(cycle_time)
                self.total_time += cycle_time  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
                self.log(f"‚úÖ –¶–∏–∫–ª {self.cycle} –∑–∞–≤–µ—Ä—à—ë–Ω.")
                self.log(f"‚è± –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ {self.cycle}: {cycle_time:.2f} —Å–µ–∫")
                self.log(f"‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.total_time:.2f} —Å–µ–∫")

            self.plot_tbw_graph()

        except Exception as e:
            self.log(f"‚ùó –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}")
        finally:
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)

    def test_cycle(self, test_dir, size_to_write_gb):
        file_paths = []
        start_time = time.time()

        for i in range(size_to_write_gb):
            if self.stop_flag:
                break

            filename = os.path.join(test_dir, f"file_{i}.bin")
            data = os.urandom(GB)
            with open(filename, "wb") as f:
                f.write(data)

            file_paths.append(filename)

        write_time = time.time() - start_time
        speed = size_to_write_gb / write_time
        self.total_written_gb += size_to_write_gb

        self.log(f"üìà –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: {speed:.2f} –ì–ë/—Å")
        self.log(f"üßÆ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {self.total_written_gb} –ì–ë")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
        self.log_to_csv(self.cycle, speed, self.total_written_gb)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.cycles.append(self.cycle)
        self.speeds.append(speed)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
        return write_time

    def log(self, message):
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        print(message)
        self.write_to_logfile(message)

    def write_to_logfile(self, message):
        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
        with open(self.log_file_path, "a", encoding="utf-8") as f:
            f.write(f"{message}\n")

    def create_logfile(self):
        # –ï—Å–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if not os.path.exists(self.log_file_path):
            with open(self.log_file_path, "w", encoding="utf-8") as f:
                f.write(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSD –Ω–∞—á–∞—Ç–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("-" * 40 + "\n")

    def init_csv_report(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if not os.path.exists(self.csv_file_path):
            with open(self.csv_file_path, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(["–¶–∏–∫–ª", "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–ì–ë/—Å)", "–û–±—â–∏–π –æ–±—ä—ë–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ì–ë)", "–î–∞—Ç–∞"])

    def log_to_csv(self, cycle, speed, total_written_gb):
        with open(self.csv_file_path, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([cycle, speed, total_written_gb, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])

    def plot_tbw_graph(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ TBW
        if self.cycles and self.speeds:
            print("üìä –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è...")
            try:
                plt.figure(figsize=(10, 6))
                plt.plot(self.cycles, self.speeds, marker="o")
                plt.xlabel("–¶–∏–∫–ª—ã —Ç–µ—Å—Ç–∞")
                plt.ylabel("–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–ì–ë/—Å)")
                plt.title("–ì—Ä–∞—Ñ–∏–∫ TBW (Total Bytes Written)")
                plt.grid(True)

                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                graph_path = os.path.join(os.path.expanduser("~"), "Desktop", "tbw_graph.png")
                plt.savefig(graph_path)
                plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ

                print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {graph_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# –ó–∞–ø—É—Å–∫ GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = SSDTesterGUI(root)
    root.mainloop()
